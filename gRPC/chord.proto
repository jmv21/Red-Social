// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";
option objc_class_prefix = "RTG";

package routeguide;

// Interface exported by the server.
service RouteGuide {

  // Basic message to recognize if there is a steady connection
  rpc Alive(Feature) returns (Feature) {}
  
  rpc Join(Feature) returns (Feature) {}

  // Returns the address of the succesor node
  rpc Find_succ(Idvalue) returns (Address) {}

  // Returns the address of the predecessor node after looking for it
  rpc Find_pred(Idvalue) returns (Address) {}
  
  // Returns list of successor nodes
  rpc Get_succ_list(Feature) returns (Address_list) {}
  
  // Returns the address of the closest predecessor node
  rpc Closest_pred_fing(Idvalue) returns (Address) {}
  
  // Returns the address of the predecessor node
  rpc Get_pred(Feature) returns (Address) {}
  
  
  rpc Rectify(Address) returns (Feature) {}
  
  rpc Get_storage(Address) returns (Storage) {}
  
  rpc Get_non_storage(Address) returns (Storage) {}
  
  rpc Make_storage(Storage_make_data) returns (Feature) {}

  rpc Remove_storage(Feature) returns (Feature) {}

  rpc Get_storage_by_id(Addr_id) returns (Address) {}



}




// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;
}

message Idvalue {
  int64 value = 1;
}

message Address {
  // The id of the node in addr
  int64 value = 1;
  // An ip and port of the node
  string addr = 2;
}

message Address_list {
  // Defines a list or array of id and address
  repeated Address values = 1;
}

message Storage {
  
  string addr = 1;
  bool is_storage = 2;
  bool found = 3;
  bool error = 4;
}



message Storage_make_data {
    int32 K = 1;
    int32 index = 2;
    Address_list nodes = 3;

}

message Addr_id {

  string value = 1;
  string addr = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
